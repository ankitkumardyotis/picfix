generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// == Lemon Squeezy data

// model Subscription {
//   id             String   @id @default(auto()) @map("_id") @db.ObjectId
//   lemonSqueezyId Int      @unique
//   orderId        Int
//   name           String
//   email          String
//   variantName    String
//   productName    String
//   cardBrand      String
//   cardLastFour   Int
//   currency       String
//   price          String
//   creditPoints   Int
//   status         String
//   variantId      Int
//   planId         String   @db.ObjectId
//   user           User     @relation(fields: [userId], references: [id])
//   userId         String   @db.ObjectId
//   createdAt      DateTime

//   @@index([planId, lemonSqueezyId])
// }

model Plan {
  id                    String    @id @default(auto()) @map("_id") @db.ObjectId
  userId                String    @unique @db.ObjectId
  userName              String?
  emailId               String?
  planName              String
  creditPoints          Int
  remainingPoints       Int
  createdAt             DateTime
  expiredAt             DateTime?
}

model PaymentHistory {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  transactionId         String   @unique
  userId                String   @db.ObjectId
  userName              String
  emailId               String
  planName              String
  creditPoints          Int
  createdAt             DateTime
  amount                Int
  currency              String
  paymentStatus         String
  merchantId            String
  merchantTransactionId String
  paymentInstrument     Json
}

model History {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  replicateId String
  model       String
  status      String
  createdAt   DateTime
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  image         String?
  email         String    @unique
  createdAt     DateTime  @default(now())
  emailVerified DateTime? @map("verifiedAt")
  sessions      Session[]
  Account       Account[]
  // Subscription  Subscription[]

  @@map("users")
}

// model WebhookEvent {
//   id              String   @id @default(auto()) @map("_id") @db.ObjectId
//   createdAt       DateTime @default(now())
//   eventName       String
//   processed       Boolean  @default(false)
//   body            Json
//   processingError String?
// }

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime @map("expiresAt")
  user         User     @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime @map("expiresAt")

  @@unique([identifier, token])
  @@map("verification_tokens")
}
