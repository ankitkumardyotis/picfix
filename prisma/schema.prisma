generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Plan {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  userId          String    @unique @db.ObjectId
  userName        String?
  emailId         String?
  planName        String
  creditPoints    Int
  remainingPoints Int
  createdAt       DateTime
  expiredAt       DateTime?
}

model PaymentHistory {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  transactionId         String   @unique
  orderId               String
  userId                String   @db.ObjectId
  userName              String
  emailId               String
  contact               String
  planName              String
  creditPoints          Int
  createdAt             DateTime
  amount                Int
  currency              String
  paymentStatus         String
}

model History {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  replicateId String
  model       String
  status      String
  createdAt   DateTime
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  image         String?
  email         String    @unique
  createdAt     DateTime  @default(now())
  emailVerified DateTime? @map("verifiedAt")
  sessions      Session[]
  Account       Account[]
  // Subscription  Subscription[]

  @@map("users")
}

model WebhookEvent {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  replicateId String
  created_at  DateTime
  model       String
  output      Json
  status      String
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime @map("expiresAt")
  user         User     @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime @map("expiresAt")

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model CustomJWT {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  userId          String
  jwtRefreshToken String
}

model Project {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  userId              String    @db.ObjectId
  name                String
  description         String?
  audioLanguage       String    @default("english")
  voiceType          String    @default("male")
  pointersCount      Int       @default(5)
  article            String
  backgroundMusicId   String?
  backgroundMusicName String?
  backgroundMusicUrl  String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}
